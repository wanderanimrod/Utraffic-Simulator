Threshold testing for simulator performance.

For cars to know if they have reached particular points of interest like junctions, we could keep checking if we are
  'in the vicinity' of the point of interest every time we translate, OR, we could behave more like human beings do.
  Knowing our current speed and our location the last time we checked, plus the distance between that last-checked
  location and the point of interest, we can drastically reduce the number of checks. We would say, say that at our
  current speed, we expect to be at the point of interest in 30 minutes (SIM TIME). Then, say 25 minutes after that
  determination (java timer?), we start polling if we have gotten to the point of interest. Check the large scale
  performance of this algorithm against the performance of the naive one to find the point at which the more complex
  one becomes more efficient, if any such point exists. Then make a status checker that switches between the two
  algorithms when necessary: http://www.javapractices.com/topic/TopicAction.do?Id=54. Or, a thread that handles
  broadcasting of events to vehicles. All vehicles register their points of interest with a service running on this
  thread. This service starts a timer (which is what puts it on the separate thread) that has a memory of the next
  requested update, and then updates the concerned vehicles that they are close to their points of interest. If the
  vehicle is indeed close, it deregisters and starts polling until it gets to the point of interest. If it slowed down
  too much and is still far, it tells the service to let it know it has to che
